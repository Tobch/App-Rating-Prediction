# Step 1: Import Libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns

# Step 2: Load Data
train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')

# Step 3: Data Exploration
print(train_data.info())
print(train_data.describe())
print(train_data.isnull().sum())

# Step 4: Data Preprocessing
# Handle missing values
train_data.fillna(method='ffill', inplace=True)

# Convert categorical variables to numerical
train_data = pd.get_dummies(train_data, drop_first=True)

# Split features and target variable
X = train_data.drop(columns=['Y'])
y = train_data['Y']

# Step 5: Model Selection
models = {
    'Linear Regression': LinearRegression(),
    'Decision Tree': DecisionTreeRegressor(),
    'Random Forest': RandomForestRegressor(),
    'Gradient Boosting': GradientBoostingRegressor(),
    'Support Vector Regression': SVR()
}

# Step 6: Model Training and Evaluation
results = {}
for name, model in models.items():
    model.fit(X, y)
    predictions = model.predict(X)
    mae = mean_absolute_error(y, predictions)
    mse = mean_squared_error(y, predictions)
    r2 = r2_score(y, predictions)
    results[name] = {'MAE': mae, 'MSE': mse, 'R2': r2}

# Step 7: Results Visualization
results_df = pd.DataFrame(results).T
results_df.plot(kind='bar', figsize=(10, 6))
plt.title('Model Performance Comparison')
plt.ylabel('Error Metrics')
plt.show()

# Step 8: Final Model Selection (based on results_df)
best_model_name = results_df['MAE'].idxmin()
best_model = models[best_model_name]

# Step 9: Prediction on Test Data
test_data = pd.get_dummies(test_data, drop_first=True)
test_predictions = best_model.predict(test_data)

# Save predictions to CSV
submission = pd.DataFrame({'Predicted Rating': test_predictions})
submission.to_csv('predictions.csv', index=False)