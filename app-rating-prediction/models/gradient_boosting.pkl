import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import seaborn as sns
import matplotlib.pyplot as plt

# Load datasets
train_data = pd.read_csv('train.csv')
test_data = pd.read_csv('test.csv')

# Data exploration
print(train_data.head())
print(train_data.describe())
print(train_data.isnull().sum())

# Data preprocessing
# Handle missing values, encode categorical variables, etc.
# Example: One-hot encoding for categorical features
train_data = pd.get_dummies(train_data, columns=['X1', 'X6', 'X7'], drop_first=True)

# Feature selection
X = train_data.drop(['Y'], axis=1)
y = train_data['Y']

# Train-test split
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
models = {
    'Linear Regression': LinearRegression(),
    'Decision Tree': DecisionTreeRegressor(),
    'Random Forest': RandomForestRegressor(),
    'Gradient Boosting': GradientBoostingRegressor()
}

results = {}

for name, model in models.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_val)
    results[name] = {
        'MAE': mean_absolute_error(y_val, y_pred),
        'MSE': mean_squared_error(y_val, y_pred),
        'R2': r2_score(y_val, y_pred)
    }

# Display results
results_df = pd.DataFrame(results).T
print(results_df)

# Visualization
results_df[['MAE', 'MSE', 'R2']].plot(kind='bar')
plt.title('Model Comparison')
plt.ylabel('Score')
plt.show()